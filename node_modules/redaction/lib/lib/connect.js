'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _reactRedux = require('react-redux');

exports.default = function (resolveStoreProps, isConvertFromImmutable) {

  // supports array of strings, strings with dot, or function
  var lookup = function lookup(state, ownProps, keyValue) {
    if (typeof keyValue === 'function') return keyValue(state, ownProps);
    if (typeof keyValue === 'string') return resolveStoreProps(state, keyValue);
    throw new Error('Unknown lookup value: ' + keyValue);
  };

  /*
   Takes an object where key is anything you want and value (aka storeProp) is either
   - a dot delimited string
   - array of strings
   - function that returns an array of strings
   It will then dive into an immutable object and grab all of these storeProps
   Returns the same object, but where the values are the resolved data
   */
  var resolve = function resolve(storeProps, state, ownProps) {
    var resolved = {};

    for (var key in storeProps) {
      if (storeProps.hasOwnProperty(key)) {
        var result = lookup(state, ownProps, storeProps[key]);

        if (result && isConvertFromImmutable && typeof result.toJS === 'function') {
          result = result.toJS();
        }

        resolved[key] = result;
      }
    }

    return resolved;
  };

  var mapStateToProps = function mapStateToProps(storeProps, isConvertFromImmutable) {
    return function (state, ownProps) {
      if (typeof storeProps === 'function') {
        return storeProps(state, ownProps);
      }

      return resolve(storeProps, state, ownProps);
    };
  };

  var defaults = {
    pure: true,
    withRef: false
  };

  return function (storeProps, options) {
    var isCorrectType = !Array.isArray(storeProps) && ['string', 'object', 'function'].indexOf(typeof storeProps === 'undefined' ? 'undefined' : _typeof(storeProps)) >= 0;

    if (!storeProps || !isCorrectType) {
      throw new Error('First argument must be type of String, Object or Function');
    }

    var connector = (0, _reactRedux.connect)(mapStateToProps(storeProps, isConvertFromImmutable), function () {
      return {};
    }, null, _extends({}, defaults, options));

    return function (Component) {
      Component.storeProps = storeProps;
      return connector(Component);
    };
  };
};