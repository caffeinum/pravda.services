'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _redux = require('redux');

var _reduxImmutablejs = require('redux-immutablejs');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _immutable = require('immutable');

var _data = require('../../lib/data');

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var devTools = typeof window !== 'undefined' && window.devToolsExtension ? window.devToolsExtension() : function (v) {
  return v;
};

var defaultMiddleware = [_reduxThunk2.default];

var defaultEnhancers = [];

var createStore = function createStore(_ref) {
  var _ref$initialState = _ref.initialState,
      initialState = _ref$initialState === undefined ? (0, _immutable.Map)() : _ref$initialState,
      _ref$reducers = _ref.reducers,
      reducers = _ref$reducers === undefined ? {} : _ref$reducers,
      _ref$middleware = _ref.middleware,
      middleware = _ref$middleware === undefined ? [] : _ref$middleware,
      _ref$enhancers = _ref.enhancers,
      enhancers = _ref$enhancers === undefined ? [] : _ref$enhancers;

  if (!_immutable.Iterable.isIterable(initialState)) {
    throw new Error('Invalid initialState option');
  }

  var finalMiddleware = [].concat(defaultMiddleware, _toConsumableArray(middleware));

  var finalEnhancers = [].concat(defaultEnhancers, _toConsumableArray(enhancers), [devTools]);

  var store = (0, _redux.createStore)((0, _reduxImmutablejs.combineReducers)(reducers), initialState, _redux.compose.apply(undefined, [_redux.applyMiddleware.apply(undefined, _toConsumableArray(finalMiddleware))].concat(_toConsumableArray(finalEnhancers))));

  _data2.default.store = store;

  return store;
};

exports.default = createStore;